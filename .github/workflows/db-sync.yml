name: Database Sync (Local to RDS)

on:
  workflow_dispatch:
    inputs:
      sync_type:
        description: 'Type of sync operation'
        required: true
        type: choice
        options:
          - schema-only
          - data-only
          - full-sync
          - providers-only
      dry_run:
        description: 'Dry run (no actual changes)'
        required: false
        default: true
        type: boolean
      backup_first:
        description: 'Create RDS backup before sync'
        required: false
        default: true
        type: boolean

env:
  PYTHON_VERSION: '3.12'
  AWS_REGION: us-west-2

jobs:
  sync-database:
    name: Sync Database to RDS
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: maplocation/requirements.txt

      - name: Install dependencies
        run: |
          cd maplocation
          pip install -r requirements.txt
          pip install psycopg2-binary

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create RDS snapshot
        if: inputs.backup_first && !inputs.dry_run
        run: |
          SNAPSHOT_ID="manual-sync-backup-$(date +%Y%m%d-%H%M%S)"
          echo "Creating RDS snapshot: $SNAPSHOT_ID"

          aws rds create-db-snapshot \
            --db-instance-identifier ${{ secrets.RDS_INSTANCE_ID }} \
            --db-snapshot-identifier $SNAPSHOT_ID \
            --region ${{ env.AWS_REGION }}

          echo "Waiting for snapshot to complete..."
          aws rds wait db-snapshot-completed \
            --db-snapshot-identifier $SNAPSHOT_ID \
            --region ${{ env.AWS_REGION }}

          echo "✅ Snapshot created: $SNAPSHOT_ID"
          echo "snapshot_id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT
        id: snapshot

      - name: Test RDS connection
        run: |
          python << 'EOF'
          import psycopg2
          import os

          try:
              conn = psycopg2.connect(
                  dbname=os.environ['RDS_DB_NAME'],
                  user=os.environ['RDS_DB_USER'],
                  password=os.environ['RDS_DB_PASSWORD'],
                  host=os.environ['RDS_DB_HOST'],
                  port=os.environ['RDS_DB_PORT'],
                  sslmode='require'
              )
              print("✅ RDS connection successful")
              conn.close()
          except Exception as e:
              print(f"❌ RDS connection failed: {e}")
              exit(1)
          EOF
        env:
          RDS_DB_NAME: ${{ secrets.RDS_DB_NAME }}
          RDS_DB_USER: ${{ secrets.RDS_DB_USER }}
          RDS_DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
          RDS_DB_HOST: ${{ secrets.RDS_DB_HOST }}
          RDS_DB_PORT: ${{ secrets.RDS_DB_PORT }}

      - name: Run schema sync
        if: inputs.sync_type == 'schema-only' || inputs.sync_type == 'full-sync'
        run: |
          cd maplocation

          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN: Would apply migrations to RDS"
            python manage.py showmigrations
          else
            echo "Applying migrations to RDS..."
            python manage.py migrate --noinput
            echo "✅ Schema synchronized"
          fi
        env:
          DB_NAME: ${{ secrets.RDS_DB_NAME }}
          DB_USER: ${{ secrets.RDS_DB_USER }}
          DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
          DB_HOST: ${{ secrets.RDS_DB_HOST }}
          DB_PORT: ${{ secrets.RDS_DB_PORT }}
          DB_SSL_REQUIRE: 'true'
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      - name: Sync provider data
        if: inputs.sync_type == 'providers-only' || inputs.sync_type == 'data-only' || inputs.sync_type == 'full-sync'
        run: |
          cd maplocation

          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN: Would sync provider data"
            python manage.py list_providers || echo "Would list providers"
          else
            echo "Syncing provider data to RDS..."

            # Import Pasadena providers
            python manage.py import_regional_center_providers \
              --file "data/Pasadena Provider List.xlsx" \
              --area "Pasadena" || echo "Pasadena import skipped"

            # Import San Gabriel providers
            python manage.py import_regional_center_providers \
              --file "data/San Gabriel Pomona Provider List.xlsx" \
              --regional-center "San Gabriel" || echo "San Gabriel import skipped"

            echo "✅ Provider data synchronized"
          fi
        env:
          DB_NAME: ${{ secrets.RDS_DB_NAME }}
          DB_USER: ${{ secrets.RDS_DB_USER }}
          DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
          DB_HOST: ${{ secrets.RDS_DB_HOST }}
          DB_PORT: ${{ secrets.RDS_DB_PORT }}
          DB_SSL_REQUIRE: 'true'
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      - name: Sync ZIP codes
        if: inputs.sync_type == 'data-only' || inputs.sync_type == 'full-sync'
        run: |
          cd maplocation

          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN: Would sync ZIP code data"
          else
            echo "Syncing ZIP code data to RDS..."

            python manage.py populate_san_gabriel_zips || echo "San Gabriel ZIPs skipped"
            python manage.py populate_pasadena_zips || echo "Pasadena ZIPs skipped"

            echo "✅ ZIP code data synchronized"
          fi
        env:
          DB_NAME: ${{ secrets.RDS_DB_NAME }}
          DB_USER: ${{ secrets.RDS_DB_USER }}
          DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
          DB_HOST: ${{ secrets.RDS_DB_HOST }}
          DB_PORT: ${{ secrets.RDS_DB_PORT }}
          DB_SSL_REQUIRE: 'true'
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      - name: Verify sync
        if: "!inputs.dry_run"
        run: |
          cd maplocation

          python << 'EOF'
          import django
          import os
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'maplocation.settings')
          django.setup()

          from locations.models import Provider, ZIPCode

          provider_count = Provider.objects.count()
          zip_count = ZIPCode.objects.count()

          print(f"✅ Verification:")
          print(f"  - Providers: {provider_count}")
          print(f"  - ZIP Codes: {zip_count}")

          if provider_count == 0:
              print("⚠️  Warning: No providers found in database")
          EOF
        env:
          DB_NAME: ${{ secrets.RDS_DB_NAME }}
          DB_USER: ${{ secrets.RDS_DB_USER }}
          DB_PASSWORD: ${{ secrets.RDS_DB_PASSWORD }}
          DB_HOST: ${{ secrets.RDS_DB_HOST }}
          DB_PORT: ${{ secrets.RDS_DB_PORT }}
          DB_SSL_REQUIRE: 'true'
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

      - name: Create summary
        if: always()
        run: |
          echo "## 🔄 Database Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Sync Type:** ${{ inputs.sync_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Backup Created:** ${{ inputs.backup_first }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY

          if [ -n "${{ steps.snapshot.outputs.snapshot_id }}" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Snapshot ID:** ${{ steps.snapshot.outputs.snapshot_id }}" >> $GITHUB_STEP_SUMMARY
          fi
