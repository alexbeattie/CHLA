name: Deploy CHLA Provider Map

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('maplocation/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Cache Node dependencies
      uses: actions/cache@v4
      with:
        path: map-frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('map-frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install backend dependencies
      run: |
        cd maplocation
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd map-frontend
        npm ci
    
    - name: Run backend tests
      run: |
        cd maplocation
        python manage.py check
        # Add more tests when available
        # python manage.py test
    
    - name: Lint frontend
      run: |
        cd map-frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: map-frontend/dist/
        retention-days: 1

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install EB CLI
      run: |
        pip install awsebcli
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create deployment package
      run: |
        cd maplocation
        zip -r ../deployment-package.zip . -x "*.git*" "*.venv*" "*.DS_Store*" "*.pyc*" "__pycache__/*"
    
    - name: Deploy to Elastic Beanstalk via AWS CLI
      run: |
        # Create application version
        aws elasticbeanstalk create-application-version \
          --application-name chla-api \
          --version-label "deploy-$(date +%s)" \
          --source-bundle S3Bucket="${{ secrets.S3_BUCKET_NAME }},S3Key=deployment-package.zip" \
          --auto-create-application || echo "Application already exists"
        
        # Deploy to environment
        aws elasticbeanstalk update-environment \
          --environment-name chla-api-env-lb \
          --version-label "deploy-$(date +%s)" || echo "Deployment in progress"
    
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        sleep 60
    
    - name: Set environment variables after deployment
      run: |
        # Set environment variables via AWS CLI
        aws elasticbeanstalk update-environment \
          --environment-name chla-api-env-lb \
          --option-settings \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=DJANGO_SECRET_KEY,Value="${{ secrets.DJANGO_SECRET_KEY }}"' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=DJANGO_DEBUG,Value=false' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=ALLOWED_HOSTS,Value="api.kinddhelp.com,.elasticbeanstalk.com,localhost"' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=CORS_ALLOWED_ORIGINS,Value="https://kinddhelp.com,https://www.kinddhelp.com"' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=CSRF_TRUSTED_ORIGINS,Value="https://api.kinddhelp.com,https://kinddhelp.com,https://www.kinddhelp.com"' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_NAME,Value=postgres' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_USER,Value=chla_admin' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_PASSWORD,Value="${{ secrets.DB_PASSWORD }}"' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_HOST,Value="${{ secrets.DB_HOST }}"' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_PORT,Value=5432' \
          'Namespace=aws:elasticbeanstalk:application:environment,OptionName=DB_SSL_REQUIRE,Value=true' || echo "Environment variables will be set via .ebextensions"
    
    - name: Verify deployment
      run: |
        echo "Checking backend health..."
        sleep 30  # Wait for deployment to settle
        curl -f https://api.kinddhelp.com/api/ || exit 1

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Cache Node dependencies
      uses: actions/cache@v4
      with:
        path: map-frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('map-frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    - name: Install dependencies
      run: |
        cd map-frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd map-frontend
        VITE_API_BASE_URL="https://api.kinddhelp.com/api" npm run build
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Deploy to S3
      run: |
        cd map-frontend
        aws s3 sync dist s3://${{ secrets.S3_BUCKET_NAME }} --delete
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
    
    - name: Verify deployment
      run: |
        echo "Waiting for CloudFront invalidation to propagate..."
        sleep 60
        echo "Checking frontend..."
        curl -f https://kinddhelp.com/ || exit 1

  notify:
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Deployment Status
      run: |
        if [[ "${{ needs.deploy-backend.result }}" == "success" && "${{ needs.deploy-frontend.result }}" == "success" ]]; then
          echo "✅ Deployment successful!"
          echo "Backend: https://api.kinddhelp.com"
          echo "Frontend: https://kinddhelp.com"
        else
          echo "❌ Deployment failed!"
          echo "Backend status: ${{ needs.deploy-backend.result }}"
          echo "Frontend status: ${{ needs.deploy-frontend.result }}"
          exit 1
        fi
