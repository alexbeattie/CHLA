name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip tests (emergency deployments only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'
  AWS_REGION: us-west-2

jobs:
  # Backend Testing & Linting
  backend-test:
    name: Backend Tests & Linting
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: maplocation/requirements.txt

      - name: Install GDAL and system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gdal-bin libgdal-dev python3-gdal

      - name: Install dependencies
        run: |
          cd maplocation
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov flake8 black isort

      - name: Run linting
        run: |
          cd maplocation
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv,migrations,staticfiles
          black --check . --exclude='/(venv|migrations|staticfiles)/'
          isort --check-only . --skip venv --skip migrations --skip staticfiles
        continue-on-error: true

      - name: Run Django system checks
        run: |
          cd maplocation
          python manage.py check
        env:
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DJANGO_SECRET_KEY: test-secret-key-for-ci
          DJANGO_DEBUG: 'false'

      - name: Run migrations
        run: |
          cd maplocation
          python manage.py migrate --noinput
        env:
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DJANGO_SECRET_KEY: test-secret-key-for-ci
          DJANGO_DEBUG: 'false'

      - name: Run Django tests
        run: |
          cd maplocation
          pytest --cov=. --cov-report=xml --cov-report=html -v
        env:
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DJANGO_SECRET_KEY: test-secret-key-for-ci
          DJANGO_DEBUG: 'false'
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./maplocation/coverage.xml
          flags: backend
        continue-on-error: true

  # Frontend Testing & Linting
  frontend-test:
    name: Frontend Tests & Linting
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: map-frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd map-frontend
          npm ci

      - name: Run linting
        run: |
          cd map-frontend
          npm run lint || echo "No lint script configured"
        continue-on-error: true

      - name: Run tests
        run: |
          cd map-frontend
          npm test -- --run
        continue-on-error: true

      - name: Build frontend (test)
        run: |
          cd map-frontend
          npm run build
        env:
          NODE_ENV: production

  # Deploy Backend to Elastic Beanstalk
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: |
      always() &&
      (needs.backend-test.result == 'success' || inputs.skip_tests) &&
      (needs.frontend-test.result == 'success' || inputs.skip_tests) &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install EB CLI
        run: pip install awsebcli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get current EB version (for rollback)
        id: current-version
        run: |
          cd maplocation
          CURRENT_VERSION=$(eb status --region ${{ env.AWS_REGION }} | grep "Deployed Version" | awk '{print $3}')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Deploy to Elastic Beanstalk
        id: deploy
        run: |
          cd maplocation
          eb deploy chla-api-prod --region ${{ env.AWS_REGION }} --timeout 20
        timeout-minutes: 25

      - name: Wait for deployment to stabilize
        run: sleep 30

      - name: Health check
        id: health-check
        run: |
          HEALTH_URL="${{ secrets.BACKEND_URL }}/api/health/"
          MAX_RETRIES=10
          RETRY_COUNT=0

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")

            if [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Health check passed"
              exit 0
            fi

            echo "⏳ Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES failed (HTTP $HTTP_CODE)"
            RETRY_COUNT=$((RETRY_COUNT + 1))
            sleep 10
          done

          echo "❌ Health check failed after $MAX_RETRIES attempts"
          exit 1
        continue-on-error: true

      - name: Rollback on failure
        if: steps.health-check.outcome == 'failure' && steps.current-version.outputs.version != ''
        run: |
          cd maplocation
          echo "🔄 Rolling back to version ${{ steps.current-version.outputs.version }}"
          eb deploy chla-api-prod --version ${{ steps.current-version.outputs.version }} --region ${{ env.AWS_REGION }}

      - name: Notify on deployment failure
        if: failure()
        run: |
          echo "::error::Backend deployment failed. Check logs for details."

      - name: Save deployment info
        if: success()
        run: |
          echo "Deployment successful at $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Backend URL: ${{ secrets.BACKEND_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- Region: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY

  # Deploy Frontend to S3/CloudFront
  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: |
      always() &&
      needs.deploy-backend.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: map-frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd map-frontend
          npm ci

      - name: Switch to production environment
        run: |
          cd map-frontend
          ./switch-env.sh prod

      - name: Build frontend
        run: |
          cd map-frontend
          npm run build
        env:
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Backup current S3 deployment
        run: |
          BACKUP_BUCKET="${{ secrets.S3_BUCKET }}-backup-$(date +%Y%m%d-%H%M%S)"
          aws s3 sync s3://${{ secrets.S3_BUCKET }}/ s3://$BACKUP_BUCKET/ --region ${{ env.AWS_REGION }} || echo "No backup needed"
        continue-on-error: true

      - name: Deploy to S3
        run: |
          cd map-frontend
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET }}/ \
            --delete \
            --region ${{ env.AWS_REGION }} \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "*.json"

          # HTML and JSON files with shorter cache
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET }}/ \
            --region ${{ env.AWS_REGION }} \
            --cache-control "public,max-age=0,must-revalidate" \
            --exclude "*" \
            --include "*.html" \
            --include "*.json"

      - name: Invalidate CloudFront cache
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "CloudFront invalidation created: $INVALIDATION_ID"

          # Wait for invalidation to complete
          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --id $INVALIDATION_ID

          echo "✅ CloudFront cache invalidated successfully"

      - name: Verify deployment
        run: |
          FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          sleep 10

          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Frontend deployment verified"
          else
            echo "⚠️  Frontend returned HTTP $HTTP_CODE"
            exit 1
          fi

      - name: Save deployment info
        if: success()
        run: |
          echo "Frontend deployment successful at $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend URL: ${{ secrets.FRONTEND_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- S3 Bucket: ${{ secrets.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          echo "- CloudFront Distribution: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_STEP_SUMMARY

  # Post-deployment verification
  post-deployment:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: |
      always() &&
      needs.deploy-backend.result == 'success' &&
      needs.deploy-frontend.result == 'success'

    steps:
      - name: E2E health check
        run: |
          echo "Running end-to-end health checks..."

          # Check backend
          BACKEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.BACKEND_URL }}/api/health/)

          # Check frontend
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.FRONTEND_URL }})

          echo "Backend status: $BACKEND_STATUS"
          echo "Frontend status: $FRONTEND_STATUS"

          if [ "$BACKEND_STATUS" = "200" ] && [ "$FRONTEND_STATUS" = "200" ]; then
            echo "✅ All systems operational"
            exit 0
          else
            echo "❌ System health check failed"
            exit 1
          fi

      - name: Create deployment summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 [Frontend](${{ secrets.FRONTEND_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 [Backend API](${{ secrets.BACKEND_URL }}/api/)" >> $GITHUB_STEP_SUMMARY
