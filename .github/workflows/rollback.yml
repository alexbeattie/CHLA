name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'What to rollback'
        required: true
        type: choice
        options:
          - backend-only
          - frontend-only
          - both
      backend_version:
        description: 'Backend version label (leave empty for previous)'
        required: false
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string

env:
  AWS_REGION: us-west-2
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  rollback-backend:
    name: Rollback Backend
    runs-on: ubuntu-latest
    if: inputs.target == 'backend-only' || inputs.target == 'both'
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install EB CLI
        run: pip install awsebcli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get deployment history
        id: versions
        run: |
          cd maplocation

          echo "Available versions:"
          eb appversion --region ${{ env.AWS_REGION }}

          CURRENT_VERSION=$(eb status --region ${{ env.AWS_REGION }} | grep "Deployed Version" | awk '{print $3}')
          echo "Current version: $CURRENT_VERSION"
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine rollback version
        id: target-version
        run: |
          if [ -n "${{ inputs.backend_version }}" ]; then
            VERSION="${{ inputs.backend_version }}"
          else
            cd maplocation
            # Get the second most recent version
            VERSION=$(eb appversion --region ${{ env.AWS_REGION }} | grep "app-" | head -n 2 | tail -n 1 | awk '{print $1}')
          fi

          echo "Rolling back to: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Perform rollback
        run: |
          cd maplocation

          echo "🔄 Rolling back backend to ${{ steps.target-version.outputs.version }}"
          echo "Reason: ${{ inputs.reason }}"

          eb deploy chla-api-prod \
            --version ${{ steps.target-version.outputs.version }} \
            --region ${{ env.AWS_REGION }} \
            --timeout 15

      - name: Verify rollback
        run: |
          sleep 30

          HEALTH_URL="${{ secrets.BACKEND_URL }}/api/health/"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL || echo "000")

          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Backend rollback successful"
          else
            echo "❌ Backend health check failed after rollback (HTTP $HTTP_CODE)"
            exit 1
          fi

      - name: Create rollback summary
        if: always()
        run: |
          echo "## 🔄 Backend Rollback" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**From:** ${{ steps.versions.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "**To:** ${{ steps.target-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY

  rollback-frontend:
    name: Rollback Frontend
    runs-on: ubuntu-latest
    if: inputs.target == 'frontend-only' || inputs.target == 'both'
    timeout-minutes: 10

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Find latest backup
        id: backup
        run: |
          LATEST_BACKUP=$(aws s3api list-buckets \
            --query "Buckets[?contains(Name, '${{ secrets.S3_BUCKET }}-backup-')].Name" \
            --output text \
            | tr '\t' '\n' \
            | sort -r \
            | head -n 1)

          if [ -z "$LATEST_BACKUP" ]; then
            echo "❌ No backup buckets found"
            exit 1
          fi

          echo "Found backup: $LATEST_BACKUP"
          echo "bucket=$LATEST_BACKUP" >> $GITHUB_OUTPUT

      - name: Restore from backup
        run: |
          echo "🔄 Restoring frontend from ${{ steps.backup.outputs.bucket }}"

          aws s3 sync \
            s3://${{ steps.backup.outputs.bucket }}/ \
            s3://${{ secrets.S3_BUCKET }}/ \
            --delete \
            --region ${{ env.AWS_REGION }}

      - name: Invalidate CloudFront
        run: |
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "CloudFront invalidation: $INVALIDATION_ID"

          aws cloudfront wait invalidation-completed \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --id $INVALIDATION_ID

          echo "✅ CloudFront cache invalidated"

      - name: Verify rollback
        run: |
          sleep 10

          FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)

          if [ "$HTTP_CODE" = "200" ]; then
            echo "✅ Frontend rollback successful"
          else
            echo "❌ Frontend health check failed (HTTP $HTTP_CODE)"
            exit 1
          fi

      - name: Create rollback summary
        if: always()
        run: |
          echo "## 🔄 Frontend Rollback" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Backup:** ${{ steps.backup.outputs.bucket }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY

  notification:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [rollback-backend, rollback-frontend]
    if: always()

    steps:
      - name: Create incident report
        run: |
          echo "## ⚠️ Rollback Incident Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target:** ${{ inputs.target }}" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Initiated by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.rollback-backend.result }}" != "skipped" ]; then
            echo "- Backend: ${{ needs.rollback-backend.result }}" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.rollback-frontend.result }}" != "skipped" ]; then
            echo "- Frontend: ${{ needs.rollback-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          fi
