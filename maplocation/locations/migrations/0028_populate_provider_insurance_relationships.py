# Generated by Django 5.2 on 2025-10-30 18:08

from django.db import migrations
import re


def populate_provider_insurance(apps, schema_editor):
    """
    Parse insurance_accepted TEXT field and create ProviderInsurance relationships
    """
    ProviderV2 = apps.get_model('locations', 'ProviderV2')
    InsuranceCarrier = apps.get_model('locations', 'InsuranceCarrier')
    ProviderInsuranceCarrier = apps.get_model('locations', 'ProviderInsuranceCarrier')

    # Build carrier lookup (case-insensitive)
    carriers = {c.name.lower(): c for c in InsuranceCarrier.objects.all()}

    # Mapping for common variations
    carrier_mapping = {
        'private pay': 'private pay',
        'private insurance': 'private pay',
        'private': 'private pay',
        'regional center': 'regional center',
        'regional centre': 'regional center',
        'medi-cal': 'medi-cal',
        'medicaid': 'medi-cal',
        'blue cross blue shield': 'blue cross blue shield',
        'blue cross': 'blue cross',
        'blue shield': 'blue shield',
        'anthem blue cross': 'anthem',
        'anthem': 'anthem',
        'kaiser permanente': 'kaiser permanente',
        'kaiser/easterseal': 'kaiser permanente',
        'kaiser': 'kaiser permanente',
        'aetna': 'aetna',
        'cigna': 'cigna',
        'uhc': 'united healthcare',
        'united healthcare': 'united healthcare',
        'united behavioral health': 'united behavioral health',
        'magellan': 'magellan',
        'beacon': 'beacon',
        'mhn': 'mhn',
        'optum': 'optum',
        'l.a. care': 'l.a. care',
        'la care': 'l.a. care',
        'caloptima': 'caloptima',
        'molina': 'molina',
        'molina health care': 'molina',
        'health net': 'health net',
        'covered california': 'covered california',
        'inland empire health plan': 'inland empire health plan',
        'medicare': 'medicare',
        'tricare': 'tricare',
        'the holman group': 'the holman group',
        'holman group': 'the holman group',
        'self-determination programs': 'self-determination programs',
        'humana': 'humana',
    }

    relationships_created = 0
    providers_processed = 0
    errors = []

    for provider in ProviderV2.objects.all():
        providers_processed += 1

        if not provider.insurance_accepted or not provider.insurance_accepted.strip():
            continue

        # Clean the insurance string
        insurance_str = provider.insurance_accepted

        # Remove JSON artifacts
        insurance_str = re.sub(r'[{}\"]+', '', insurance_str)

        # Split by comma
        carrier_names = [c.strip() for c in insurance_str.split(',') if c.strip()]

        for carrier_name in carrier_names:
            # Normalize the carrier name
            normalized = carrier_name.lower().strip()

            # Map to standard name
            if normalized in carrier_mapping:
                normalized = carrier_mapping[normalized]

            # Find the carrier
            carrier = carriers.get(normalized)

            if not carrier:
                # Try partial matching for variations
                for key, value in carrier_mapping.items():
                    if key in normalized:
                        carrier = carriers.get(value)
                        break

            if carrier:
                # Create relationship
                _, created = ProviderInsuranceCarrier.objects.get_or_create(
                    provider=provider,
                    insurance_carrier=carrier
                )
                if created:
                    relationships_created += 1
            else:
                # Map to 'Other' for unknown carriers
                other_carrier = carriers.get('other')
                if other_carrier:
                    ProviderInsuranceCarrier.objects.get_or_create(
                        provider=provider,
                        insurance_carrier=other_carrier
                    )
                errors.append(f'Unknown carrier: "{carrier_name}" for provider {provider.name}')

    print(f'‚úÖ Processed {providers_processed} providers')
    print(f'‚úÖ Created {relationships_created} provider-insurance relationships')
    if errors:
        print(f'‚ö†Ô∏è  {len(errors)} unknown carriers mapped to "Other"')


def reverse_populate(apps, schema_editor):
    """Reverse migration - delete all provider-insurance relationships"""
    ProviderInsuranceCarrier = apps.get_model('locations', 'ProviderInsuranceCarrier')
    count = ProviderInsuranceCarrier.objects.count()
    ProviderInsuranceCarrier.objects.all().delete()
    print(f'üóëÔ∏è  Deleted {count} provider-insurance relationships')


class Migration(migrations.Migration):

    dependencies = [
        ('locations', '0027_populate_insurance_carriers'),
    ]

    operations = [
        migrations.RunPython(populate_provider_insurance, reverse_populate),
    ]
