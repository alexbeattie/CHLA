# Generated by Django on demand: copy data from providers -> providers_v2
from django.db import migrations


def copy_providers(apps, schema_editor):
    Provider = apps.get_model("locations", "Provider")
    ProviderV2 = apps.get_model("locations", "ProviderV2")

    batch = []
    for p in Provider.objects.all().iterator():
        batch.append(
            ProviderV2(
                name=p.name,
                phone=p.phone,
                address=p.address,
                latitude=p.latitude,
                longitude=p.longitude,
                website=getattr(p, "website_domain", None),
                description=getattr(p, "specializations", None),
                insurance_accepted=getattr(p, "insurance_accepted", None),
                type=(
                    ""
                    if not getattr(p, "specializations", None)
                    else str(p.specializations).split(",")[0].strip()
                ),
                languages_spoken=None,
            )
        )
        if len(batch) >= 500:
            ProviderV2.objects.bulk_create(batch, ignore_conflicts=True)
            batch = []
    if batch:
        ProviderV2.objects.bulk_create(batch, ignore_conflicts=True)


class Migration(migrations.Migration):
    dependencies = [
        ("locations", "0009_remove_providerv2_areas_and_more"),
    ]

    operations = [
        # Ensure target columns exist and have expected types before copying
        migrations.RunSQL(
            sql=(
                "ALTER TABLE providers_v2 "
                "ADD COLUMN IF NOT EXISTS website varchar(200);"
            ),
            reverse_sql=("ALTER TABLE providers_v2 " "DROP COLUMN IF EXISTS website;"),
        ),
        migrations.RunSQL(
            sql=(
                "ALTER TABLE providers_v2 " "ADD COLUMN IF NOT EXISTS description text;"
            ),
            reverse_sql=(
                "ALTER TABLE providers_v2 " "DROP COLUMN IF EXISTS description;"
            ),
        ),
        migrations.RunSQL(
            sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN address TYPE text USING address::text"
            ),
            reverse_sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN address TYPE text USING address::text"
            ),
        ),
        migrations.RunSQL(
            sql=(
                "ALTER TABLE providers_v2 " "ALTER COLUMN insurance_accepted TYPE text"
            ),
            reverse_sql=(
                "ALTER TABLE providers_v2 " "ALTER COLUMN insurance_accepted TYPE text"
            ),
        ),
        migrations.RunSQL(
            sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN languages_spoken TYPE text USING languages_spoken::text"
            ),
            reverse_sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN languages_spoken TYPE text USING languages_spoken::text"
            ),
        ),
        # Ensure nullable constraints are relaxed for copy
        migrations.RunSQL(
            sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN languages_spoken DROP NOT NULL, "
                "ALTER COLUMN type DROP NOT NULL"
            ),
            reverse_sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN languages_spoken DROP NOT NULL, "
                "ALTER COLUMN type DROP NOT NULL"
            ),
        ),
        migrations.RunPython(copy_providers, migrations.RunPython.noop),
    ]
