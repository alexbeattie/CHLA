# Generated by Django 5.2 on 2025-08-26 03:13

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('locations', '0008_add_la_regional_center_fields'),
    ]

    operations = [
        # Remove legacy columns (state + DB) safely
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE providers_v2 "
                        "DROP COLUMN IF EXISTS areas, "
                        "DROP COLUMN IF EXISTS center_based_services, "
                        "DROP COLUMN IF EXISTS coverage_areas, "
                        "DROP COLUMN IF EXISTS services, "
                        "DROP COLUMN IF EXISTS specializations, "
                        "DROP COLUMN IF EXISTS website_domain;"
                    ),
                    reverse_sql=(
                        "ALTER TABLE providers_v2 "
                        "ADD COLUMN IF NOT EXISTS areas text, "
                        "ADD COLUMN IF NOT EXISTS center_based_services text, "
                        "ADD COLUMN IF NOT EXISTS coverage_areas jsonb, "
                        "ADD COLUMN IF NOT EXISTS services jsonb, "
                        "ADD COLUMN IF NOT EXISTS specializations jsonb, "
                        "ADD COLUMN IF NOT EXISTS website_domain varchar(200);"
                    ),
                )
            ],
            state_operations=[
                migrations.RemoveField(model_name='providerv2', name='areas'),
                migrations.RemoveField(model_name='providerv2', name='center_based_services'),
                migrations.RemoveField(model_name='providerv2', name='coverage_areas'),
                migrations.RemoveField(model_name='providerv2', name='services'),
                migrations.RemoveField(model_name='providerv2', name='specializations'),
                migrations.RemoveField(model_name='providerv2', name='website_domain'),
            ],
        ),
        # Add new columns (state + DB) safely
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE providers_v2 "
                        "ADD COLUMN IF NOT EXISTS description text, "
                        "ADD COLUMN IF NOT EXISTS email varchar(254), "
                        "ADD COLUMN IF NOT EXISTS hours text, "
                        "ADD COLUMN IF NOT EXISTS languages_spoken text, "
                        "ADD COLUMN IF NOT EXISTS type varchar(100), "
                        "ADD COLUMN IF NOT EXISTS verified boolean DEFAULT false, "
                        "ADD COLUMN IF NOT EXISTS website varchar(200);"
                    ),
                    reverse_sql=(
                        "ALTER TABLE providers_v2 "
                        "DROP COLUMN IF EXISTS website, "
                        "DROP COLUMN IF EXISTS verified, "
                        "DROP COLUMN IF EXISTS type, "
                        "DROP COLUMN IF EXISTS languages_spoken, "
                        "DROP COLUMN IF EXISTS hours, "
                        "DROP COLUMN IF EXISTS email, "
                        "DROP COLUMN IF EXISTS description;"
                    ),
                )
            ],
            state_operations=[
                migrations.AddField(model_name='providerv2', name='description', field=models.TextField(blank=True, null=True)),
                migrations.AddField(model_name='providerv2', name='email', field=models.EmailField(blank=True, max_length=254, null=True)),
                migrations.AddField(model_name='providerv2', name='hours', field=models.TextField(blank=True, null=True)),
                migrations.AddField(model_name='providerv2', name='languages_spoken', field=models.TextField(blank=True, null=True)),
                migrations.AddField(model_name='providerv2', name='type', field=models.CharField(blank=True, max_length=100, null=True)),
                migrations.AddField(model_name='providerv2', name='verified', field=models.BooleanField(default=False)),
                migrations.AddField(model_name='providerv2', name='website', field=models.URLField(blank=True, null=True)),
            ],
        ),
        # Ensure insurance_accepted is text (state + DB)
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql=(
                        "ALTER TABLE providers_v2 "
                        "ALTER COLUMN insurance_accepted TYPE text"
                    ),
                    reverse_sql=(
                        "ALTER TABLE providers_v2 "
                        "ALTER COLUMN insurance_accepted TYPE text"
                    ),
                )
            ],
            state_operations=[
                migrations.AlterField(
                    model_name='providerv2',
                    name='insurance_accepted',
                    field=models.TextField(blank=True, null=True),
                ),
            ],
        ),
        # Ensure nullable columns are nullable in DB
        migrations.RunSQL(
            sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN languages_spoken DROP NOT NULL, "
                "ALTER COLUMN type DROP NOT NULL"
            ),
            reverse_sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN languages_spoken DROP NOT NULL, "
                "ALTER COLUMN type DROP NOT NULL"
            ),
        ),
        # Normalize address column to text (some DBs may have jsonb from earlier state)
        migrations.RunSQL(
            sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN address TYPE text USING address::text"
            ),
            reverse_sql=(
                "ALTER TABLE providers_v2 "
                "ALTER COLUMN address TYPE text USING address::text"
            ),
        ),
    ]
