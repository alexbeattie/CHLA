# Generated by Django 5.2 on 2025-10-28 06:44
# Modified to handle bigint to UUID conversion for relationship tables

import django.db.models.deletion
from django.db import migrations, models


def convert_provider_relationships(apps, schema_editor):
    """
    Convert relationship tables from old Provider (bigint) to ProviderV2 (uuid).
    Since the old Provider model is being removed, we need to:
    1. Clear existing relationship data (references old Provider)
    2. Convert provider_id columns from bigint to uuid
    3. Re-establish foreign keys to ProviderV2
    """
    tables = [
        "locations_providerfundingsource",
        "provider_regional_centers",
        "locations_providerservicemodel",
        "locations_providerinsurancecarrier",
    ]

    with schema_editor.connection.cursor() as cursor:
        for table in tables:
            # Check if table exists and if provider_id is bigint
            cursor.execute(
                f"""
                SELECT data_type
                FROM information_schema.columns
                WHERE table_name = %s
                AND column_name = 'provider_id'
            """,
                [table],
            )

            result = cursor.fetchone()
            if result and result[0] in ("bigint", "integer"):
                # Table has integer/bigint provider_id, needs conversion
                print(f"Converting {table} provider_id from {result[0]} to uuid...")

                # Drop foreign key constraint if it exists
                cursor.execute(
                    f"""
                    DO $$
                    BEGIN
                        -- Drop old foreign key constraint
                        IF EXISTS (
                            SELECT 1 FROM information_schema.table_constraints
                            WHERE table_name = %s
                            AND constraint_name LIKE '%%provider_id%%'
                            AND constraint_type = 'FOREIGN KEY'
                        ) THEN
                            EXECUTE (
                                SELECT 'ALTER TABLE ' || %s || ' DROP CONSTRAINT ' || constraint_name
                                FROM information_schema.table_constraints
                                WHERE table_name = %s
                                AND constraint_name LIKE '%%provider_id%%'
                                AND constraint_type = 'FOREIGN KEY'
                                LIMIT 1
                            );
                        END IF;
                    END $$;
                """,
                    [table, table, table],
                )

                # Clear existing data (references old Provider model)
                cursor.execute(f"TRUNCATE TABLE {table} CASCADE")

                # Drop and recreate provider_id as uuid
                cursor.execute(f"ALTER TABLE {table} DROP COLUMN provider_id")
                cursor.execute(
                    f"""
                    ALTER TABLE {table}
                    ADD COLUMN provider_id uuid NOT NULL
                """
                )

                # Add foreign key to ProviderV2
                cursor.execute(
                    f"""
                    ALTER TABLE {table}
                    ADD CONSTRAINT {table}_provider_id_fkey
                    FOREIGN KEY (provider_id)
                    REFERENCES providers_v2(id)
                    ON DELETE CASCADE
                """
                )

                print(f"✓ Converted {table}")


def reverse_conversion(apps, schema_editor):
    """Cannot reverse - old Provider model is gone"""
    pass


def delete_provider_model_if_exists(apps, schema_editor):
    """Delete Provider model table if it still exists (was dropped in 0021)"""
    with schema_editor.connection.cursor() as cursor:
        cursor.execute(
            """
            SELECT EXISTS (
                SELECT 1 FROM information_schema.tables
                WHERE table_schema = 'public' AND table_name = 'providers'
            )
        """
        )
        table_exists = cursor.fetchone()[0]

        if table_exists:
            print("Dropping providers table...")
            cursor.execute("DROP TABLE providers CASCADE")
            print("✓ Dropped providers table")
        else:
            print("providers table already dropped - skipping")


def reverse_delete_provider(apps, schema_editor):
    """Cannot reverse - Provider model is gone"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("locations", "0021_drop_old_provider_table"),
    ]

    operations = [
        # First, run custom SQL to convert the columns
        migrations.RunPython(convert_provider_relationships, reverse_conversion),
        # Then update the Django model definitions
        migrations.AlterField(
            model_name="providerfundingsource",
            name="provider",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="provider_funding_sources",
                to="locations.providerv2",
            ),
        ),
        migrations.AlterField(
            model_name="providerregionalcenter",
            name="provider",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="regional_centers",
                to="locations.providerv2",
            ),
        ),
        migrations.AlterField(
            model_name="providerservicemodel",
            name="provider",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="provider_service_models",
                to="locations.providerv2",
            ),
        ),
        migrations.AlterField(
            model_name="providerinsurancecarrier",
            name="provider",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="provider_insurance_carriers",
                to="locations.providerv2",
            ),
        ),
        migrations.AlterField(
            model_name="providerfundingsource",
            name="funding_source",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="provider_links",
                to="locations.fundingsource",
            ),
        ),
        migrations.AlterField(
            model_name="providerinsurancecarrier",
            name="insurance_carrier",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="provider_links",
                to="locations.insurancecarrier",
            ),
        ),
        migrations.AlterField(
            model_name="providerservicemodel",
            name="service_model",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="provider_links",
                to="locations.servicedeliverymodel",
            ),
        ),
        # Delete Provider model table if it still exists (was already dropped in 0021)
        migrations.RunPython(delete_provider_model_if_exists, reverse_delete_provider),
    ]
